import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

plugins {
   //id "com.matthewprenger.cursegradle" version "1.2.0"
    id "java-library"
}

//Normally this would be added to the plugins block above, but since ForgeGradle is constantly changing, and the
//plugin block requires you to specify a version, this allows gradle to get the most up-to-date version.
apply plugin: "net.minecraftforge.gradle"
apply plugin: "idea"

idea {
    module {
        for (String excludeDirName in [".gradle", ".idea", "build", "gradle", "media", "run", "out"]) {
            excludeDirs += file(excludeDirName)
        }
    }
}

//NOTE: build.gradle automatically loads gradle.properties, which holds variables that change between different mods

//Basic mod setup
group = mod_group
archivesBaseName = mod_name
version = mod_version

//Uncomment if using Eclipse so eclipse task generates correctly.
//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

//Load in the repositories for mods useful in the dev process
def repos = new JsonSlurper().parse(file("repos.json"))
repositories {
    mavenCentral()
    repos.each { n, u ->
        maven {
            name = n
            url = u.url
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:" + minecraft_version + "-" + forge_version

    //compile files("../ArdentCore/build/libs")
    compile project(":ArdentCore")

    repos.each { n, l ->
        compileOnly fg.deobf(l.lib + ":api")
        runtimeOnly fg.deobf(l.lib)
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client = {
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'

            if (project.hasProperty('mc_uuid')) {
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                args '--username', project.getProperty('mc_username')
            }
            workingDirectory project.file('run').canonicalPath
            mods {
                titles {
                    source sourceSets.main
                }
            }
        }
        server = {
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            mods {
                titles {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_id,
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : mod_id,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}