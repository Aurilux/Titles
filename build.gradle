import groovy.json.JsonOutput
import groovy.json.JsonSlurper

buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

apply plugin: "net.minecraftforge.gradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'java-library'
apply plugin: "idea"

idea.module {
    for (String excludeDirName in [".gradle", ".idea", "build", "gradle", "media", "run", "out", "logs"]) {
        excludeDirs += file(excludeDirName)
    }
}

//NOTE: build.gradle automatically loads gradle.properties, which holds variables that change between different mods,
//such as the forge version and mod properties (name, mod id, etc)

//Basic mod setup
group = "aurilux." + mod_id
archivesBaseName = mod_name
version = minecraft_version + "-" + mod_version

//Uncomment if using Eclipse so eclipse task generates correctly.
//sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

//Load in the repositories for mods useful in the dev process
def repos = new JsonSlurper().parse(file("repos.json"))
repositories {
    mavenCentral()
    repos.each { n, u ->
        maven {
            name = n
            url = u.url
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:" + minecraft_version + "-" + forge_version

    repos.each { n, l ->
        compileOnly fg.deobf(l.lib + ":api")
        runtimeOnly fg.deobf(l.lib)
    }
}

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client = {
            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            properties 'fml.earlyprogresswindow': 'false'

            workingDirectory project.file('run').canonicalPath
            mods {
                titles {
                    source sourceSets.main
                }
            }
        }
        server = {
            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            mods {
                titles {
                    source sourceSets.main
                }
            }
        }
    }
}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": "Aurilux",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": mod_version,
                "Implementation-Vendor" : "Aurilux",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task updateJson {
    doLast {
        def updateJsonFile = file('update.json')
        def updateJson = new JsonSlurper().parse(updateJsonFile) as Map

        updateJson."${minecraft_version}"."${mod_version}" = "See https://www.curseforge.com/minecraft/mc-mods/${mod_id}/files for detailed information."

        // Update promos
        updateJson.promos."${minecraft_version}-latest" = "${mod_version}"
        updateJson.promos."${minecraft_version}-recommended" = "${mod_version}"

        updateJsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(updateJson)))
    }
}

//build.dependsOn updateJson