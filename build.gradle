buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'idea'

//Load the config file
ext.config = parseConfig(file('build.properties'))

//Current version of my mod. Gets appended to the end of the jar name
version = "${config.minecraft_version}-${config.mod_version}"
//Java file structure/hierarchy
group = config.group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//Name of the mod. Used to name the resulting jar
archivesBaseName = config.mod_name

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "${config.minecraft_version}-${config.forge_version}"
    mappings = config.mc_mappings
    runDir = "run"
}

repositories {
    maven { //The repo from which to get Waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { //the repo from which to get NEI, CodeChickenCore
        name "ChickenBones Repo"
        url "http://chickenbones.net/maven/"
    }
}

dependencies {
    //compile "mcp.mobius.waila:Waila:1.5.10_1.7.10:dev"
    //CodeChickenCore will automatically download the proper NEI and ChickenLib
    //compile "codechicken:CodeChickenCore:1.7.10-1.0.4.29:dev"
    //compile "codechicken:NotEnoughItems:1.7.10-1.0.4.107:dev"
}

processResources {
    //This will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    //Replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }

    //Copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

//Adds my custom core library mod to the list of module dependencies in idea during 'setupDecompWorkspace'.
/*
idea.module.iml {
    whenMerged { module ->
        module.dependencies.add(new org.gradle.plugins.ide.idea.model.ModuleDependency('ArdentCore', 'COMPILE'))
    }
}sourceSets {
    main { output.resourcesDir = output.classesDir }
}
*/

//required for Intellij IDEA 14+ to properly recognize assets
idea.module.inheritOutputDirs = true