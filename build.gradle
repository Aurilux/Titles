buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

repositories {
    maven { // The repo from which to get waila
        name "Mobius Repo"
        url "http://mobiusstrip.eu/maven"
    }
    maven { // the repo from which to get NEI, CodeChickenCore
        name 'ChickenBones Repo'
        url "http://chickenbones.net/maven/"
    }
}

ext.priv = parseConfig(file('private.properties'))

def parseConfig(File config) {
    config.withReader {
        def prop = new Properties()
        prop.load(it)
        return (new ConfigSlurper().parse(prop))
    }
}

apply plugin: 'forge'
apply plugin: 'idea'

//Note: This will cause an error unless you have this section after the "apply plugin: 'forge'" declaration
dependencies {
    // I don't have to specify NEI.. because gradle magic. aka: transitive dependency resolution
    // This means that NEI and its dependencies will get loaded automatically
    compile "mcp.mobius.waila:Waila:1.5.9_1.7.10"
    compile project(":ArdentCore")
}

//Adds my custom core library mod to the list of module dependencies. Every time I refresh the idea workspace with the
//"--refresh dependencies" parameter it adds the forge and Minecraft libraries, which doesn't include my own by default.
idea.module.iml {
    whenMerged { module ->
        module.dependencies.add(new org.gradle.plugins.ide.idea.model.ModuleDependency('ArdentCore', 'COMPILE'))
    }
}

//Current version of my mod. Gets appended to the end of the jar name
version = "1.0.0"
//Java file structure/hierarchy
group = "aurilux.titles" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
//Name of the mod. Used to name the resulting jar
archivesBaseName = "Titles"

minecraft {
    version = "1.7.10-10.13.2.1230"
}

version = "1.7.10-" + project.version

processResources {
    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'mod_version':project.version, 'minecraft_version':project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

def jarToCopy = copySpec{
    from 'build/libs/'
    include { details -> details.file.name.endsWith('.jar') &&
            details.file.name.contains(project.version) }
}

//Copies the completed jar to three directories. The MultiMC/mods and .minecraft/mods for testing, and Dropbox for
//release.
task copyToTesting(type: Copy) {
    //There is currently no way (so far as I know) to do three copies and delete's in a more concise manner
    copy {
        //Delete the jar of a previous mod version
        def dir = "${priv.user}/Desktop/MultiMC/mods"
        def files = new File(dir).listFiles().sort()
        files.each { File file ->
            println file.name
            if (file.name.contains(project.name) && !file.name.contains(project.version)) {
                delete file;
                //returning true breaks the each loop
                return true;
            }
        }

        with jarToCopy
        into dir
    }
    copy {
        //Delete the jar of a previous mod version
        def dir = "${priv.user}/AppData/Roaming/.minecraft/mods"
        def files = new File(dir).listFiles().sort()
        files.each { File file ->
            println file.name
            if (file.name.contains(project.name) && !file.name.contains(project.version)) {
                delete file;
                //returning true breaks the each loop
                return true;
            }
        }

        with jarToCopy
        into dir
    }
    copy {
        //I don't delete anything from this directory because that would get rid of previous versions
        with jarToCopy
        into "${priv.user}/Dropbox/Minecraft Mods/1.7.x"
    }
}
//This statements tells gradle to run 'copyToTesting' immediately after the build task has been completed
build.finalizedBy copyToTesting